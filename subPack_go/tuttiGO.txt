package subPack_go

	import (
		"fmt"
		"os"
		"os/signal"
		//"strings"	
		"runtime"	
	)
//---------------------
//g00_main.go
//------------------------------------------------------
func Main() {

	fmt.Println("\n======================\n         My Main()  INIZIO di mainPack \n===============================\n")
	fmt.Println(  red( appName + " - Main") )
	
	//fmt.Println( "\ncolori:", red("rosso"), green("verde"), yellow("giallo"),  magenta("magenta"), cyan("ciano") , "\n"  )  
	
	//---------------
	//val0, val1, val2, val3, val4 := getPgmArgs("-html",  "-input" , "-countNumLines" , "-maxNumLinesToWrite", "-lemmaformat")	
	
	//-----------------------------------
	args := []string{}
	if runtime.GOOS == "linux" {
		args = append(args, "--class=Lorca")
	}
	//  err := lorca.New("", "", 480, 320, args...) moved out of main so that ui is available outside main()
	if err != nil {
		fmt.Println( red( "errore in lorca "), err )  //  //log.Fatal(err)
	}
	defer ui.Close()
	
	get_all_binds()  //  binds inside are executed asynchronously after calling from js function (html/js are ready) 
	
	begin_GO_HTML_Talk();  // this function is  executed firstily before html/js is ready  
	
	// the following in main() is executed at the end when the browser is close 
	// Wait until the interrupt signal arrives or browser window is closed
	sigc := make(chan os.Signal)
	signal.Notify(sigc, os.Interrupt)
	select {
		case <-sigc:
		case <-ui.Done():
	}
	fmt.Println("exiting") // log.Println("exiting...")
}
//-----------------------------------------
func endBegin(wh string) {
	//fmt.Println("func endBegin (", wh,")")
	if sw_stop { 
		fmt.Println("\nXXXXXXXX  error found XXXXXXXXXXXXXX\n"); 
	}	
	sw_begin_ended = true 		
}
//--------------------------------
/**
func read_dictLang_file( path1 string, inpFile string) {
	bytesPerRow:= 10
    lineD := rowListFromFile( path1, inpFile, "scelta lingua e voce", "read_dictLang_file", bytesPerRow)  
	if sw_stop { return }
	
	lineZ := ""
	prevRunLanguage = ""	
	for z:=0; z< len(lineD); z++ { 
		lineZ = strings.TrimSpace(lineD[z]) 
		if lineZ == "" { continue }
		if lineZ[0:9] == "language=" {			
			prevRunLanguage = lineZ[9:] 			
		}
	}	
}// end of read_dictLang_file		
***/
//-------------------------------------

func check(e error) {
    if e != nil {
        panic(e)
    }
}

//--------------------------------
//end of g00_main.go
//------------------------------------------------------
package subPack_go
//--------------------------
//g01_declare.go
//-----------------------------------------

const appName = "gohtml_sample"
const htmlFile= appName + ".html"
const parameter_path_html string  = "/subPack_html_js"
//--------------------------------------
// color.go
//---------------------------------------
/**         ***  COLORS: got from https // www.dolthub.com/blog/2024-02-23-colors-in-golang/ ***
    var Reset   = "\033[0m" 
	var Red     = "\033[31m" 
	var Green   = "\033[32m" 
	var Yellow  = "\033[33m" 
	var Blue    = "\033[34m" 
	var Magenta = "\033[35m" 
	var Cyan    = "\033[36m" 
	var Gray    = "\033[37m" 
	var White   = "\033[97m"
**/

func red(     str1 string) string { return "\033[31m" + str1 +  "\033[0m" }
func green(   str1 string) string { return "\033[32m" + str1 +  "\033[0m" }
func yellow(  str1 string) string { return "\033[33m" + str1 +  "\033[0m" }
//func blue(  str1 string) string { return "\033[34m" + str1 +  "\033[0m" }
func magenta( str1 string) string { return "\033[35m" + str1 +  "\033[0m" }
func cyan(    str1 string) string { return "\033[36m" + str1 +  "\033[0m" }
//func gray(  str1 string) string { return "\033[37m" + str1 +  "\033[0m" }
//func white( str1 string) string { return "\033[97m" + str1 +  "\033[0m" }

//---------------------------------------------------------------------------------
var sw_stop bool = false
var errorMSG = ""; 

var sw_begin_ended = false     
var sw_HTML_ready  = false     
//var apiceInverso = `40`  //  in windows:  tasto Alt + 96 (tastierino numerico)
//---------------------------

//---------------
// end of g01_declare.go
//-----------------------------------------package subPack_go

	import (
		"fmt"
		"strings"		
		"strconv"
	)
//--------------------------------------------------------
//g02_bind_go__passToJS_.go
//-------------------------------------------
func get_all_binds() {
		fmt.Println("func get_all_binds")
		
		
		ui.Bind("go_passToJs_html_is_ready", func( msg1 string,  js_function string) { 		
				bind_go_passToJs_html_is_ready( msg1,  js_function)  })
		
		ui.Bind("go_passToJs_sommaDueNumeri", func(s_num1 string, s_num2 string, js_function string) {
				bind_go_passToJs_sommaDueNumeri( getInt(s_num1), getInt(s_num2), js_function) } )
		//--------------------------------------		
		
		
		return 
}

//-----------------------------------
/**		
func get_all_bindsRESTO() {		
		//--------------
		**
		ui.Bind("go_passToJs_html_and_go_ready", func( msg1 string,  js_function string) { 	
			bind_go_passToJs_html_and_go_ready( msg1,  js_function)  })
		**
		//--------------
		//----------------------------
		ui.Bind("go_passToJs_wordList", func( isChange bool, s_fromWord string, s_numWords string, sel_level string, 
															sel_extrRow string, sel_toBeLearned string,  js_function string) { 		
				bind_go_passToJs_wordList( isChange, getInt(s_fromWord), getInt(s_numWords), sel_level, sel_extrRow, sel_toBeLearned,  js_function)  })
		//--------------------------------------		
		ui.Bind("go_passToJs_prefixWordList", func(s_numWords string, wordPrefix string, js_function string) {
				bind_go_passToJs_prefixWordList( getInt(s_numWords), wordPrefix, js_function) } )
		//--------------------------------------		
		ui.Bind("go_passToJs_betweenWordList", func( s_maxNumWords string, fromWordPref string, js_function string) {
				bind_go_passToJs_betweenWordList( getInt(s_maxNumWords), fromWordPref, js_function) } ) 	
	 	//--------------------------------------		
		ui.Bind("go_passToJs_betweenLemmaList", func( s_maxNumLemmas string, fromLemmaPref string, js_function string) {
				bind_go_passToJs_betweenLemmaList( getInt(s_maxNumLemmas), fromLemmaPref, js_function) } ) 		 			
			
		//---------------------------------------
		ui.Bind("go_passToJs_lemmaWordList", func(lemma string, inpMaxWordLemma string, js_function string) {
				bind_go_passToJs_lemmaWordList(lemma, getInt( inpMaxWordLemma),  js_function) } ) 
		//---------------------------------------	
		ui.Bind("go_passToJs_getRowsByIxWord", func( sIxWord string, max_num_row4wordS string, js_function string) {
				bind_go_passToJs_getRowsByIxWord(  getInt(sIxWord), getInt(max_num_row4wordS), js_function) } ) 
		//-----------------------------------
		ui.Bind("go_passToJs_getRowsByIxLemma", func( sIxLemma string, max_num_row4lemmaS string, js_function string) {
				bind_go_passToJs_getRowsByIxLemma(  getInt(sIxLemma), getInt(max_num_row4lemmaS), js_function) } ) 
		//-----------------------------------
		
		ui.Bind("go_passToJs_getWordByIndex2", func( s_ixWord string, swOnlyThisWordRows bool, s_maxNumRow string,  js_function string) {
				bind_go_passToJs_getWordByIndex2(   getInt(s_ixWord), swOnlyThisWordRows,      getInt(s_maxNumRow), js_function) } ) 
		//---------------------------------------
		ui.Bind("go_passToJs_thisWordRowList", func( aWord string, s_maxNumRow string, js_function string) {				
				bind_go_passToJs_thisWordRowList( aWord, getInt(s_maxNumRow), js_function) } )
		//---------------------------------------
		ui.Bind("go_passToJs_rowList", func(  s_inpBegRow string,   s_maxNumRow string, js_function string) {	
				bind_go_passToJs_rowList(     getInt(s_inpBegRow), getInt(s_maxNumRow), js_function) } )
		//---------------------------------------
	
		ui.Bind("go_passToJs_rowWordList", func( numIdOut string, s_ixRR string, js_function string ) {
				bind_go_passToJs_rowWordList(numIdOut, getInt(s_ixRR), js_function) } ) 	
		//---------------------------------------	
		ui.Bind("go_write_lang_dictionary", func( langAndVoiceName string) {
			bind_go_write_lang_dictionary( langAndVoiceName ) } ) 
		//---------------------------------------	
		ui.Bind("go_write_word_dictionary", func( listGoWords string) {
			bind_go_write_word_dictionary( listGoWords ) } )  				
		//---------------------------------------			
		ui.Bind("go_write_row_dictionary", func( listGoRows string) {
			bind_go_write_row_dictionary( listGoRows ) } )  
		//---------------------
		ui.Bind("go_passToJs_word_known", func( s_ixWord string,  s_yesNo string,  s_knowCtr string, js_function string) {
			bind_go_passToJs_word_known(       getInt(s_ixWord), getInt(s_yesNo), getInt(s_knowCtr), js_function)  } )  
			
		//----------------------------------------------------------------
		**
		ui.Bind("go_passToJs_read_wordsToLearn", func( js_function string) {
			bind_go_passToJs_read_wordsToLearn(js_function)  } )  
		**
		//----------------------------------------------------------------
		ui.Bind("go_passToJs_write_WordsToLearn", func( js_function string) {
			bind_go_passToJs_write_WordsToLearn(js_function)  } )  	
			
		//-----------------------------------------
		**
		ui.Bind("go_passToJs_updateRowGroup", func( s_index string,  s_inpBegRow string,  s_inpNumRow string,  js_function string) {	
			bind_go_passToJs_updateRowGroup(       getInt(s_index), getInt(s_inpBegRow), getInt(s_inpNumRow),  js_function)   } ) 
		**
		//-------------------------------------------------------------------
		
		ui.Bind("go_passToJs_getIxRowFromGroup", func( s_rowGrIndex string,  s_html_rowGroup_beginNum string, s_html_rowGroup_numRows string, js_function string) {		
			bind_go_passToJs_getIxRowFromGroup( getInt(s_rowGrIndex),  getInt( s_html_rowGroup_beginNum), getInt( s_html_rowGroup_numRows),  js_function)  } ) 
		
		//----------------------------------------------------------------
}  
***/
//---------------------------------------------
func bind_go_passToJs_html_is_ready( msg1 string,  js_function string) {
	fmt.Println("\n", "go func bind_go_passToJs_html_is_ready () " , "\n\t msg from html: ", msg1 )  
	
	fmt.Println("XXXXXXXXXX   ", green("html has been loaded"), "   XXXXXXXXXXXX")
	
	begin() 
	
	fmt.Println( green( "\n\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n" + 
		"xxxxxxxxxxxxxx you can use the tool xxxxxxxxxxxxxxxxxx\n"  + 
		"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n"  ) ) 
		
	//prova_js_function_treValori();
	
	//go_exec_js_function( js_function, msg1); 	
	
} // end of bind_go_passToJs_html_is_ready
 
//--------------------------------------
func bind_go_passToJs_sommaDueNumeri( num1 int, num2 int, js_function string) {
	outS1 :=  strconv.Itoa(  num1+num2 );  
	go_exec_js_function( js_function, outS1 );
}
//---------------------------------------- 
 
 
//---------------------------------------------
/**
func bind_go_passToJs_html_and_go_ready( msg1 string,  js_function string) {
	fmt.Println("\n", "go func  bind_go_passToJs_html_and_go_ready() " , "\n\t msg from html: ", msg1 )  
	
	fmt.Println("XXXXXXXXXX   PRONTO  XXXXXXXXXXXX")
	
	begin() 
	
} // end of bind_go_passToJs_html_and_go_ready
***/
//-------------------------------------------------------- 

//---------------------------		

func getInt(x string) int {	
	y1, e1 := strconv.Atoi( x ) 
	if e1 == nil { 
		return y1
	} 
	y2, e2 := strconv.Atoi(  "0"+strings.TrimSpace(x)  ) 
	if e2 == nil {
		return y2
	} else {
		fmt.Println("error in getInt(",x,") ", e2) 
	}
	return 0
}

//-------------------------------------
func showErrMsg(errorMSG0 string, msg1 string, func1 string) {
	errorMSG = strings.ReplaceAll( errorMSG0, "\n"," ") 
	fmt.Println(msg1, " func ", func1)
	go_exec_js_function( "js_go_setError", errorMSG ); 	
}
//--------------------------------
func showErrMsg2(errorMSG0 string, msg1 string) {
	errorMSG = strings.ReplaceAll( errorMSG0, "\n"," ") 
	fmt.Println(msg1)
	go_exec_js_function( "js_go_setError", errorMSG ); 	
}
//------------------------------
func showInfoRead( fileName string, startStop string) {
		
	msg1_Js := "file " + fileName + " " + startStop 
 	msg1:=`<br>file &nbsp;&nbsp;<span style="color:blue;" >` + fileName + `</span>`	+ 				
				`<br><span style="font-size:0.7em;color:black;">`	+ startStop	+ `</span>` 		
				
	showErrMsg2(msg1, msg1_Js)	
}
//------------------------------------------------
func isNumber(s string) bool {
    for _, v := range s {
        if v < '0' || v > '9' {
            return false
        }
    }
    return true
}


//end of g02_bind_go__passToJS_.go

//-----------------------------------------------------------package subPack_go

	import (
		"fmt"
		"os"
		"strings"		
		"github.com/zserge/lorca"	
		"github.com/lxn/win"	
	)
	
//------------------------------------------------
//g03_html_env.go	
//--------------------------------------------------------
var scrX, scrY int = getScreenXY();


//------------------------------

var ui, err = lorca.New("", "", scrX, scrY); // crea ambiente html e javascript  // if height and width set to more then maximum (eg. 2000, 2000), it seems it works  


//---------------------
func getScreenXY() (int, int) {
	
	// use ==>  var x, y int = getScreenXY();
	
	var width  int = int(win.GetSystemMetrics(win.SM_CXSCREEN));
	var height int = int(win.GetSystemMetrics(win.SM_CYSCREEN));
	if width == 0 || height == 0 {
		//fmt.Println( "errore" )
		return 2000, 2000; 
	}	
	width  = width  - 20;  // subtraction to make room for any decorations 
	height = height - 40;  // subtraction to make room for any decorations 
	
	return width, height
}
//----------------------------------	

func begin_GO_HTML_Talk() { 	
	fmt.Println("func begin_GO_HTML_Talk"); 
	setHtmlEnv();	
}
//---------------

//------------------------------------
func setHtmlEnv() {	
	fmt.Println("func setHtmlEnv:  start load html")
    // load file html 	
	
	var html_path = getCompleteHtmlPath( parameter_path_html ) 
	            
	fmt.Println("path html        = " + html_path)
	
	ui.Load("file:///" + html_path + string(os.PathSeparator) + htmlFile ); 
	
	fmt.Println("\n", "func setHtmlEnv: wait for html ( javascript function js_call_go()", "\n")  
	
} // end of setHtmlEnv
//--------------------------------------------------------
//-------------------------
func getCompleteHtmlPath( path_html string) string {
	
	//curDir    := "D:/ANTONIO/K_L_M_N/LINGUAGGI/GO/_WORDS_BY_FREQUENCE/WbF_prova1_input_piccolo
	 
	curDir, err := os.Getwd()
    if err != nil {
		fmt.Println("setHtmlEnv() 3 err=", err )
        //log.Fatal(err)
    }	
				
	fmt.Println("curDir           = " + curDir ); 
	
	curDirBack  := curDir
	k1:= strings.LastIndex(curDir, "/") 
	k2:= strings.LastIndex(curDir, "\\") 
	if k2 > k1 { k1 = k2 } 
	curDirBack = curDir[0:k1] 	
	
	var newPath string = ""
	if strings.Index(path_html,":") > 0 {
		newPath = path_html
	} else if path_html[0:2] == ".." {
		newPath = curDirBack  + path_html[2:] 
	} else {
		newPath = curDir + path_html
	}
	return newPath 
} 
//------------------------
func putFileError( msg1, inpFile string) {
	err1:= `document.getElementById("id_startwait").innerHTML = '<br><br> <span style="color:red;">§msg1§</span> <span style="color:blue;">§inpFile§</span>';` ; 		
	err1 = strings.ReplaceAll( err1, "§msg1§", msg1 ); 	 
	err1 = strings.ReplaceAll( err1, "§inpFile§", inpFile); 	
	ui.Eval( err1 );	
}   

//-----------------------------------
// end of g03_html_env.go	
//--------------------------------------------------------package subPack_go

	import (
		"fmt"
		"os"
		"strings"
		"strconv"
	)

//g04_begin.go
//------------------------------

func begin() { 	
	fmt.Println("func begin"); 
	
	read_all_files() 
	if sw_stop { endBegin("1"); return }
	/**
	build_and_elab_word_list()
	if sw_stop { endBegin("2"); return }
	
	//stat_useWord();	
	if sw_stop { endBegin("3"); return }	
	
	if sw_rewrite_wordLemma_dict { rewrite_word_lemma_dictionary() }
	
	if sw_stop { endBegin("4"); return }	
	
	//read_wordsToLearn()	
	
	endBegin("6")
	
	//writeUnaTantumNuovoFile()
	
	//-------------------------------------------
	
	numberOfRows = len(inputTextRowSlice)
	
	//buildStatistics()
	**/
	/**
	mainNum := strconv.Itoa(numberOfUniqueWords) +";" + strconv.Itoa(numberOfWords) + ";" + strconv.Itoa(numberOfRows) +	
		   ";))"	
		   //";" + "level " + msgLevelStat + "))" 		
	**/
	mainNum:= ""; 
	showReadFile:=""
	
	go_exec_js_function("js_go_showReadFile", mainNum + showReadFile);  
			
	if sw_stop { 
				fmt.Println("UI is ready ( run stopped because of some error)")
	} else {
		//go_exec_js_function("js_go_ready", prevRunLanguage + ":mainpage_value=" + last_mainpage_valueString)  // +"<file>" + prevRunListFile); 
		
		go_exec_js_function("js_go_ready")
		//log.Println("UI is ready")
		fmt.Println("UI is ready")
	}	
	fmt.Println("\nEND of begin \n") 
	fmt.Println(cyan("\nREADY"), "\n") 

	
}// end of begin	



//--------------------------------

func getPgmArgs( key0, key1 , key2 , key3, key4 string) (string, string, bool, int, string) {  
	
	//  getPgmArgs("-html", "-input" , "-countNumLines" ,  "-maxNumLinesToWrite")	

	args1    :=  os.Args[1:]		
	
	
	var val0, val1, val2, val3, val4 string
	for a:=0; a < (len(args1)-1); a++ {
		switch args1[a] {
			case key0 :   val0 = args1[a+1]
			case key1 :   val1 = args1[a+1]
			case key2 :   val2 = args1[a+1]
			case key3 :   val3 = args1[a+1]
			case key4 :   val4 = args1[a+1]
		}
	}  
	var isCount = false;
	if strings.TrimSpace(val2) == "true" {
		isCount = true
	}
	var num=0; 
	num, err := strconv.Atoi( strings.TrimSpace(val3) )
	if err != nil {
		num=0
	}

	fmt.Println("args=", args1,  " val0=", val0, " val1=", val1, " val2=", val2 , " val3=", val3, " num=", num, " val4=", val4)   
	
	return val0, val1, isCount, num, val4
	
} // end of getPgmArgs
//-------------------------------
func read_all_files() { 
	/**
	read_control_file()
	if sw_stop { endBegin("1"); return }
	test_all_folder()
	if sw_stop {return}
	
	read_languageFile(  FOLDER_INPUT, FILE_inputLanguage)
	if sw_stop { return }
	//get_separablePrefix()
	
	read_lemma_file( FOLDER_I_lemma, FILE_inpLemma_word_lemma, FILE_inpLemma_lemma_word)
	if sw_stop { return }
	
	read_ParadigmaFile( FOLDER_I_paradigma, FILE_inpParadigma ) ;		
	if sw_stop { return }
	
	read_dictLang_file( FOLDER_INPUT_OUTPUT, FILE_language );	 
	if sw_stop { return }
	
	read_dictLemmaTran_file( FOLDER_IO_lastTRAN, FILE_last_updated_dict_words ) 
	if sw_stop { return }	
	
	read_dictRow_Orig_and_Tran_file( FOLDER_IO_lastTRAN,  FILE_last_updated_dict_rows)
	if sw_stop { return }	
	
	read_lastValueSets2()
	***/
	
} // end of read_all_files
//-----------------------------------
/**
func test_all_folder() {	
	test_folder_exist( FOLDER_INPUT         ); if sw_stop { return } 	
	test_folder_exist( FOLDER_OUTPUT        ); if sw_stop { return } 	
	test_folder_exist( FOLDER_INPUT_OUTPUT  ); if sw_stop { return } 
	
	test_folder_exist( FOLDER_I_lemma )     ;  if sw_stop { return } 	
	test_folder_exist( FOLDER_I_paradigma)  ;  if sw_stop { return } 	
	test_folder_exist( FOLDER_IO_lastTRAN ) ;  if sw_stop { return } 	
	
	test_folder_exist( FOLDER_O_ARCHIVE        ) ;  if sw_stop { return } 	
	test_folder_exist( FOLDER_O_arc_TRAN_rows  ) ;  if sw_stop { return } 		
	test_folder_exist( FOLDER_O_arc_TRAN_words ) ;  if sw_stop { return } 	
	test_folder_exist( FOLDER_O_arc_TO_learn   ) ;  if sw_stop { return } 	
} // end of test_all_folders
***/


// end g04_begin.go
//-------------------------------------- package subPack_go

import (  
	"fmt"
    "strings"
	"runtime"
)
//------------------------
//go_exec_js_function.go
//----------------------------------------------------------------
func go_exec_js_function(js_function0 string, inpstr string) {
	var goFunc string 
 	pc, _, _, ok := runtime.Caller(1)
	details := runtime.FuncForPC(pc)
	if ok && details != nil {
		goFunc = strings.ReplaceAll(details.Name(), "main.","")
	} else {
		goFunc=""
	}
	js_fun        := strings.Split( (js_function0 + ",,,,") ,",") 	
	js_function   := strings.TrimSpace( js_fun[0] )
	if js_function == ""  { return }
	jsInpFunction := strings.TrimSpace( js_fun[1] )
	
	js_parm:=""
	k1:= strings.Index(js_function, "(") 
	if k1 > 0 {
		js_parm     = strings.ReplaceAll(  js_function[k1+1:], ")","")			
		js_function = strings.TrimSpace(js_function[0:k1] )
	} 
	/**
	fmt.Println("  js_function=" + js_function)
	fmt.Println("      js_parm=" + js_parm)
	fmt.Println("jsInpFunction=" + jsInpFunction)
	fmt.Println("       goFunc=" + goFunc)
	**/
	
	/*
	This function executes a javascript eval command 
	which must execute a function by passing string constant to it. 
	Should this string contain some new line, e syntax error would occur in eval the statement.
	
	To avoid this kind of error, the string argument (inpstr) of the javascript function (js_function) 
	is forced to be always enclosed in back ticks trasforming it in "template literal".  
	Just in case back ticks and dollars are in the string, they are replaced by " "   	
	*/
	inpstr = strings.ReplaceAll( inpstr, "`", " "   ); 	   	 
	inpstr = strings.ReplaceAll( inpstr, "$", "&dollar;"); 
	
	evalStr := fmt.Sprintf( "%s(`%s`,`%s`,`%s`,`%s`);",  js_function, inpstr, js_parm, "js=" + jsInpFunction, "go=" + goFunc ) ; 
	
	//fmt.Println("evalStr=" + evalStr); 
	
	ui.Eval(evalStr)
	
} // end of go_exec_js_function
//----------------------------------------------------------------


//--------------------------------
// end of go_exec_js_function.go
//----------------------------------------------------